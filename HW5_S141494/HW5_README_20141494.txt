1.a,b,c구현
2.b,c,d,e구현
3. a,b,c구현
4. 미구현
5. 구현
6. 미구현


1.
(a) 기하물체는 박스를 각각 다르게 기하변환한 물체가 3개,floor를 다르게 기하변환한 물체 2개(바닥포함)
호랑이를 기하변환한 계층모델 1개가 있다.

(b)호랑이 가족을 계층모델로 만들었다. 이 때 호랑이는 코드 그대로 사용한 것이 아닌 진행속도가 랜덤하게 결정되는 움직임을 가지는 기하변환을 포함한다. 
각 호랑이들은 원점에 가까울수록 작으며, 원점을 중심으로 같은 각도로 회전한다.

(c)박스 두개는 제자리에서 위 방향 혹은 아랫방향으로 늘어나는데, 이는 이동변환과 크기변환을 같은 속도로 하여 마치 한쪽에 고정된 상태로 팽창하는것처럼 보이게된다.
        Matrix.translateM(mModelMatrix, 0, -100f, 70f+(float)Math.sin(tim)*10.0f, -100f);
        Matrix.scaleM(mModelMatrix, 0, 30f, 30f+(float)Math.sin(tim)*10.0f, 30f);
  호랑이들은 회전하는 다음 각도가 랜덤하게 적용되는 이동을 한다. 평균적으로는 각도가 증가할 확률이 높으므로 회전한다.
	rotation_angle_tiger += (Math.random()*4)-1.8;

	Matrix.rotateM(mModelMatrix, 0, -rotation_angle_tiger, 0f, 1f, 0f);

2. (b)세상 좌표계를 기준으로 y축 위에 존재하는 점광원을 구현하였다. 나머지 광원들은 스폿광원이기때문에 쉽게 확인 가능하다.
   (c)눈좌표계를 기준으로 위치하는 스폿 광원이 두개 존재하며, 그중 하나는 시간에따라 움직인다.
   (d) c의 두 광원은 스폿광원이다.
   (e) e의 광원중 작은 광원은 스스로 움직인다.

3.(a) 한손가락를 터치하고 위아래로 움직이면 y축을 따라, 좌우로 이동하면 회전하지 않았을경우의 화면상 가로축을 나타내는 x -z 방향으로 이동한다.
      프로그램 설계상 플로어 위에서 물체가 움직이는걸 관찰하는데에는 이 방식이 낫다고 생각하여 이런식으로 구현하였다.
  (b) 두손가락 터치후 줌인 줌아웃 기능을 구현하였다. 두 손가락 사이의 간격을 x좌표간의 차의 절대값, y좌표간의 차의 절대값으로 구하고, x나 y의 좌표간의 차이가 증가하면 줌인, 감소하면 줌아웃으로 구현하였다.뷰 매트릭스에 상수를 곱하여 시행한다.
  (c) 세손가락을 터치하고 좌우로 움직이면 원점을 바라보면서 구형을 따라 회전하도록 구현하였다. 플로어 위의 물체들을 관찰하는 프로그램의 특성, x,y축을 사용한 터치입력의 편의상 자유로운 카메라이동이 불편하여 이런식으로 구현하였다.

5.기존 쉐이더와는 달리 안개의 거리값을 uniform 변수로 사용하면서 프로그램상에서 안개의 최소,최대거리를 사용할 수 있는 퐁쉐이더가 구현되어있다.